package website.lintcode;

/**
 * 
 * @author yanpf
 * @date 2019年1月8日 下午4:16:16
 * @description 你有两个罐子，容量分别为 x 和 y 公升。你可以获取到无限数量的水。你需要判断能否使用这两个罐子量出恰好 z 公升的水。
 * 
 *              如果 z 公升水可以量出，你必须在若干次操作后，可以在一个或两个罐子中盛上 z 公升的水。
 * 
 *              允许的操作：
 * 
 *              将任意一个罐子盛满水。 倒空任意一个罐子里的水。 将一个罐子中的水倒入另一个罐子，直到这个罐子完全空了或者另一个罐子满了。
 * @example
 * 
 * 			输入：x = 3，y = 5，z = 4 输出：True
 * 
 *          输入：x = 2，y = 6，z = 5 输出：False
 *
 *
 * @Solution
 * 
 * 			这是一道脑筋急转弯题，我想很多人以前应该听过这道题目，有一个容量为3升和一个容量为5升的水罐，问我们如何准确的称出4升的水。我想很多人都知道怎么做，先把5升水罐装满水，倒到3升水罐里，这时5升水罐里还有2升水，然后把3升水罐里的水都倒掉，把5升水罐中的2升水倒入3升水罐中，这时候把5升水罐解满，然后往此时有2升水的3升水罐里倒水，这样5升水罐倒出1升后还剩4升即为所求。这个很多人都知道，但是这道题随意给我们了三个参数，问有没有解法，这就比较难了。这里我就照搬网上大神的讲解吧：
 * 
 *           这道问题其实可以转换为有一个很大的容器，我们有两个杯子，容量分别为x和y，问我们通过用两个杯子往里倒水，和往出舀水，问能不能使容器中的水刚好为z升。那么我们可以用一个公式来表达：
 * 
 *           z = m * x + n * y
 * 
 *           其中m，n为舀水和倒水的次数，正数表示往里舀水，负数表示往外倒水，那么题目中的例子可以写成: 4 = (-2) * 3 + 2 *
 *           5，即3升的水罐往外倒了两次水，5升水罐往里舀了两次水。那么问题就变成了对于任意给定的x,y,z，存不存在m和n使得上面的等式成立。根据裴蜀定理，ax
 *           + by = d的解为 d = gcd(x, y)，那么我们只要只要z % d ==
 *           0，上面的等式就有解，所以问题就迎刃而解了，我们只要看z是不是x和y的最大公约数的倍数就行了，别忘了还有个限制条件x + y >=
 *           z，因为x和y不可能称出比它们之和还多的水
 */
public class 水罐问题 extends HH {

	public static boolean canMeasureWater(int x, int y, int z) {
		// Write your code here
		return (z == 0 || z <= x + y && z % gcd(x, y) == 0);
	}

	private static int gcd(int x, int y) {
		int x1 = Math.max(x, y);
		int y1 = Math.min(x, y);
		if (x1 % y1 == 0) {
			return y1;
		}

		return gcd(y1, x1 % y1);
	}
	
	public static void main(String[] args) {
		canMeasureWater(3, 5, 4);
	}
}
